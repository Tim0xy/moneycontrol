#money controll by 0xy, ver-0.1
import locale
import json
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, CallbackQuery
from aiogram.types import (
	ReplyKeyboardMarkup,
	KeyboardButton,
	InlineKeyboardButton,
	InlineKeyboardMarkup,
)
from aiogram.utils.callback_data import CallbackData
from aiogram import Bot, Dispatcher, types, executor
from keyboard import *
from config import *

bot = Bot(token=token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

print("Bot start")

class controller(StatesGroup):
	coin = State()
	coin_m = State()
	coin_d = State()

money = 0
dream = False

##################################
debug = False
##################################

if debug:
	data = [0, 0, False]
	with open("data.json", "w") as file:
		file.write(json.dumps(data, indent=4))

@dp.message_handler(commands=['start'])
async def starter(msg: types.Message):
	await bot.send_sticker(chat_id=msg.from_user.id, sticker = r"CAACAgIAAxkBAAEEQxtiPe2MidgpQVxLm9NU3X30AAGEpm4AAgMBAAJWnb0KAuXReIfl-k8jBA")
	await msg.answer('–ü—Ä–∏–≤–µ—Ç, —Ç—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.', reply_markup= menu())

@dp.message_handler(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ")
async def starter(msg: types.Message):
	with open("data.json", "r", encoding="utf-8") as file:
		money = json.load(file)
	dream = money[2]
	if dream:
		await msg.answer(f"üí∞–°–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å: <b>{money[0]}</b> —Ä—É–±.\n–¶–µ–ª—å: <b>{money[1]}</b> —Ä—É–±.", reply_markup=info())
	else:
		await msg.answer(f"üí∞–°–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å: <b>{money[0]}</b> —Ä—É–±.", reply_markup= info())

@dp.message_handler(Text(equals="‚úñÔ∏è –û—Ç–º–µ–Ω–∞"), state="*")
async def menu_button(message: types.Message, state: FSMContext):
	await state.finish()
	await bot.send_message(
		message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=menu()
	)

# –°–±—Ä–æ—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è
@dp.message_handler(commands=['clear0088'])
async def starter(msg: types.Message):
	with open("data.json", "r", encoding="utf-8") as file:
		money = json.load(file)
	print(f"–°–±—Ä–æ—à–µ–Ω–æ: {money[0]}")
	money[0] = 0
	with open("data.json", "w") as file:
		file.write(json.dumps(money, indent=4))
	await msg.answer(f"üóë–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
	with open("data.json", "r", encoding="utf-8") as file:
		money = json.load(file)
	if dream:
		await msg.answer(f"üí∞–°–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å: <b>{money[0]}</b> —Ä—É–±.\n–¶–µ–ª—å: <b>{money[1]}</b> —Ä—É–±.")
	else:
		await msg.answer(f"üí∞–°–µ–π—á–∞—Å —É –≤–∞—Å –µ—Å—Ç—å: <b>{money[0]}</b> —Ä—É–±.")
	

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å—É–º–º—É
@dp.message_handler(Text(equals="‚ûï –î–æ–±–∞–≤–∏—Ç—å"), state="*")
async def coin(message: types.Message, state: FSMContext):
	print("0 state")
	await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=cancel())
	await controller.coin.set()
@dp.message_handler(state=controller.coin, content_types=types.ContentTypes.TEXT)
async def all_coin(message: types.Message, state: FSMContext):
	money = float(message.text.replace(",", "."))
	print(money)
	print("1 state")
	with open("data.json", "r", encoding="utf-8") as file:
		saved_money = json.load(file)
	upd_money = money + saved_money[0]
	saved_money[0] = upd_money
	with open("data.json", "w") as file:
		file.write(json.dumps(saved_money, indent=4))
		print(upd_money)
	await message.answer(f"üíµ–í—ã –¥–æ–±–∞–≤–∏–ª–∏ <b>{money}</b> —Ä—É–±.\n\n –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: <b>{upd_money}</b> —Ä—É–±.", reply_markup= menu())
	await state.update_data(name=money)
	await state.finish()

@dp.message_handler(Text(equals="‚úñÔ∏è –û—Ç–º–µ–Ω–∞"), state="*")
async def menu_button(message: types.Message, state: FSMContext):
	await state.finish()
	await bot.send_message(
		message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=menu()
	)

# –í—ã—á–∏—Ç–∞–Ω–∏–µ –∏–∑ —Å—É–º–º—ã
@dp.message_handler(Text(equals="‚ûñ –í—ã—á–µ—Å—Ç—å"), state="*")
async def coin(message: types.Message, state: FSMContext):
	print("0 state-")
	await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã—á–∏—Ç–∞–Ω–∏—è:", reply_markup=cancel())
	await controller.coin_m.set()
@dp.message_handler(state=controller.coin_m, content_types=types.ContentTypes.TEXT)
async def all_coin(message: types.Message, state: FSMContext):
	saved_money = 0
	money = float(message.text.replace(",", "."))
	print(money)
	print("1 state-")
	with open("data.json", "r", encoding="utf-8") as file:
		saved_money = json.load(file)
	upd_money = saved_money[0] - money
	saved_money[0] = upd_money
	with open("data.json", "w") as file:
		file.write(json.dumps(saved_money, indent=4))
		print(upd_money)
	await message.answer(f"üí∂–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏: <b>{money}</b> —Ä—É–±.\n\n –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–æ: <b>{upd_money}</b> —Ä—É–±.", reply_markup= menu())
	await state.update_data(name=money)
	await state.finish()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
@dp.message_handler(text="–ù–∞–∑–∞–¥")
async def starter(msg: types.Message):
	await msg.answer('–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ',reply_markup=menu())

# –¶–µ–ª—å
@dp.message_handler(text="–¶–µ–ª—å")
async def starter(msg: types.Message):
	with open("data.json", "r", encoding="utf-8") as file:
		money = json.load(file)
	dream = money[2]
	if dream:
		if money[1] > money[0]:
			await msg.answer(f"–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ: <b>{money[0]}</b> –∏–∑ <b>{money[1]}</b>\n–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞–∫–æ–ø–∏—Ç—å: <b>{money[1] - money[0]}</b>")
		else:
			await msg.answer(f"–í—ã –Ω–∞–∫–æ–ø–∏–ª–∏ –±–æ–ª—å—à–µ —á–µ–º –≤–∞–º –Ω—É–∂–Ω–æ!\n–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–æ: <b>{money[0]}</b> –∏–∑ <b>{money[1]}</b>\n–û—Å—Ç–∞—Ç–æ–∫: <b>{money[0] - money[1]}</b>")
	else:
		await msg.answer(f"–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞ —Ü–µ–ª—å!\n–£—Å—Ç–æ–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏: /target")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–∏
@dp.message_handler(commands=['target'], state="*")
async def coin(message: types.Message, state: FSMContext):
	print("0 state_dream")
	await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç—å:", reply_markup=cancel())
	await controller.coin_d.set()
@dp.message_handler(state=controller.coin_d, content_types=types.ContentTypes.TEXT)
async def all_coin(message: types.Message, state: FSMContext):

	if message.text == "‚úñÔ∏è –û—Ç–º–µ–Ω–∞":
		await state.finish()
		await bot.send_message(message.chat.id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=menu())
	money = float(message.text.replace(",", "."))
	print(money)
	print("1 state_dream")
	dream = True
	with open("data.json", "r", encoding="utf-8") as file:
		dream_money = json.load(file)
	dream_money[1] = money
	dream_money[2] = dream
	with open("data.json", "w") as file:
		file.write(json.dumps(dream_money, indent=4))
	await message.answer(f"–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ü–µ–ª—å: <b>{dream_money[1]}</b> —Ä—É–±.", reply_markup= menu())
	print(dream)
	await state.update_data(name=money)
	await state.finish()



if __name__ == "__main__":
	#main()

	while True:
		try:
			executor.start_polling(dp)
		except Exception as e:
			print('–û—à–∏–±–∫–∞ -', e)